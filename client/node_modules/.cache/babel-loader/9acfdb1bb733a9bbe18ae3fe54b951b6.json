{"ast":null,"code":"var _jsxFileName = \"/Users/stevendeavila/complete-react-21/crwn-graph-ql/client/src/pages/collection/collection.container.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { gql, useQuery } from '@apollo/client';\nimport { Query } from '@apollo/client/react/components';\nimport CollectionPage from './collection.component';\nimport Spinner from '../../components/spinner/spinner.component';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GET_COLLECTION_BY_TITLE = gql`\n  query getCollectionsByTitle($title: String!) {\n    getCollectionsByTitle(title: $title) {\n      id\n      title\n      items {\n        id\n        name\n        price\n        imageUrl\n      }\n    }\n  }\n`;\n\nconst CollectionPageContainer = ({\n  match\n}) => {\n  _s();\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_COLLECTION_BY_TITLE, {\n    variables: {\n      title: match.params.collectionId\n    }\n  });\n  if (loading) return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 23\n  }, this);\n  if (error) return `Error ${error.message}`;\n  return /*#__PURE__*/_jsxDEV(CollectionPage, {\n    collection: data.getCollectionsByTitle\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 10\n  }, this);\n};\n\n_s(CollectionPageContainer, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});\n\n_c = CollectionPageContainer;\nexport default CollectionPageContainer;\n{\n  /* <Query\n  query={GET_COLLECTION_BY_TITLE}\n  variables={{ title: match.params.collectionId }}\n  >\n  {({ loading, data }) => {\n  if (loading) return <Spinner />;\n  const { getCollectionsByTitle } = data;\n  console.log(match.params);\n  return <CollectionPage collection={data.getCollectionsByTitle} />;\n  }}\n  </Query> */\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"CollectionPageContainer\");","map":{"version":3,"sources":["/Users/stevendeavila/complete-react-21/crwn-graph-ql/client/src/pages/collection/collection.container.jsx"],"names":["React","gql","useQuery","Query","CollectionPage","Spinner","GET_COLLECTION_BY_TITLE","CollectionPageContainer","match","loading","error","data","variables","title","params","collectionId","message","getCollectionsByTitle"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,QAAd,QAA8B,gBAA9B;AACA,SAASC,KAAT,QAAsB,iCAAtB;AAEA,OAAOC,cAAP,MAA2B,wBAA3B;AACA,OAAOC,OAAP,MAAoB,4CAApB;;AAEA,MAAMC,uBAAuB,GAAGL,GAAI;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAbA;;AAeA,MAAMM,uBAAuB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAe;AAAA;;AAC7C,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BT,QAAQ,CAACI,uBAAD,EAA0B;AACjEM,IAAAA,SAAS,EAAE;AAAEC,MAAAA,KAAK,EAAEL,KAAK,CAACM,MAAN,CAAaC;AAAtB;AADsD,GAA1B,CAAzC;AAIA,MAAIN,OAAJ,EAAa,oBAAO,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,UAAP;AACb,MAAIC,KAAJ,EAAW,OAAQ,SAAQA,KAAK,CAACM,OAAQ,EAA9B;AAEX,sBAAO,QAAC,cAAD;AAAgB,IAAA,UAAU,EAAEL,IAAI,CAACM;AAAjC;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CATD;;GAAMV,uB;UAC6BL,Q;;;KAD7BK,uB;AAWN,eAAeA,uBAAf;AAEA;AACE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC","sourcesContent":["import React from 'react';\nimport { gql, useQuery } from '@apollo/client';\nimport { Query } from '@apollo/client/react/components';\n\nimport CollectionPage from './collection.component';\nimport Spinner from '../../components/spinner/spinner.component';\n\nconst GET_COLLECTION_BY_TITLE = gql`\n  query getCollectionsByTitle($title: String!) {\n    getCollectionsByTitle(title: $title) {\n      id\n      title\n      items {\n        id\n        name\n        price\n        imageUrl\n      }\n    }\n  }\n`;\n\nconst CollectionPageContainer = ({ match }) => {\n  const { loading, error, data } = useQuery(GET_COLLECTION_BY_TITLE, {\n    variables: { title: match.params.collectionId }\n  });\n\n  if (loading) return <Spinner />;\n  if (error) return `Error ${error.message}`;\n\n  return <CollectionPage collection={data.getCollectionsByTitle} />;\n};\n\nexport default CollectionPageContainer;\n\n{\n  /* <Query\nquery={GET_COLLECTION_BY_TITLE}\nvariables={{ title: match.params.collectionId }}\n>\n{({ loading, data }) => {\n  if (loading) return <Spinner />;\n  const { getCollectionsByTitle } = data;\n  console.log(match.params);\n  return <CollectionPage collection={data.getCollectionsByTitle} />;\n}}\n</Query> */\n}\n"]},"metadata":{},"sourceType":"module"}